-- Logging helpers.
local pretty_print = require('main.pretty_print')
local function lines(str)
	local t = {}
	local function helper(line) table.insert(t, line) return '' end
	helper((str:gsub('(.-)\n', helper)))
	return t
end
local logs_lines = {}
local function log(text)
	print(text)
	local text_lines = lines(text)
	for i = 1, #text_lines do
		table.insert(logs_lines, text_lines[i])
		if #logs_lines > 62 then
			table.remove(logs_lines, 1)
		end
	end
end
local function log_flush()
	gui.set_text(gui.get_node('logs_label'), table.concat(logs_lines, '\n'))
end
local function plog(t)
	log(pretty_print(t))
end

-- Button handlers.

local function app_support_pressed(self)
	log('app_support_pressed')
	local directory = directories.path_for_file(nil, directories.application_support)
	local file = directories.path_for_file('file.txt', directories.application_support)
	log('Dir: ' .. directory)
	log('File: ' .. file)
end

local function caches_pressed(self)
	log('caches_pressed')
	local directory = directories.path_for_file(nil, directories.caches)
	local file = directories.path_for_file('file.txt', directories.caches)
	log('Dir: ' .. directory)
	log('File: ' .. file)
end

local function documents_pressed(self)
	log('documents_pressed')
	local directory = directories.path_for_file(nil, directories.documents)
	local file = directories.path_for_file('file.txt', directories.documents)
	log('Dir: ' .. directory)
	log('File: ' .. file)
end

local function resource_pressed(self)
	log('resource_pressed')
	local directory = directories.path_for_file(nil, directories.resource)
	local file = directories.path_for_file('file.txt', directories.resource)
	log('Dir: ' .. directory)
	log('File: ' .. file)
end

local function temporary_pressed(self)
	log('temporary_pressed')
	local directory = directories.path_for_file(nil, directories.temporary)
	local file = directories.path_for_file('file.txt', directories.temporary)
	log('Dir: ' .. directory)
	log('File: ' .. file)
end

-- Show/hide logs view.

local function logs_pressed(self)
	gui.set_enabled(gui.get_node('logs'), not gui.is_enabled(gui.get_node('logs')))
end

-- GUI init.
function init(self)
	msg.post('.', 'acquire_input_focus')    
	msg.post('@render:', 'clear_color', {color = vmath.vector4(1.0, 1.0, 1.0, 1.0)})
	gui.set_enabled(gui.get_node('logs'), false)
end

-- Update logs view.
local frame = 0
function update(self, dt)
	frame = frame + 1
	if frame == 30 then
		log_flush()
		frame = 0
	end
end

-- Check if a button is clicked.
local function button_click(self, action, node_name, callback)
	if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
		if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1.02, 1.02, 1.02))
		elseif action.released then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1, 1, 1))
			callback(self)
		end
	end
end

local buttons = {
	btn_app_support = app_support_pressed,
	btn_caches = caches_pressed,
	btn_documents = documents_pressed,
	btn_resource = resource_pressed,
	btn_temporary = temporary_pressed,
	btn_logs = logs_pressed
}
function on_input(self, action_id, action)
	if action_id == hash('touch') then
		for button, callback in pairs(buttons) do
			button_click(self, action, button, callback)
		end
	end
end
